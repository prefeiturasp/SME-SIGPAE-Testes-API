/// <reference types='cypress' />

describe('Validar rotas de dashboard de produtos da aplicação SIGPAE', () => {
	var usuario = Cypress.config('usuario_dilog_cronograma')
	var senha = Cypress.config('senha')

	before(() => {
		cy.autenticar_login(usuario, senha)
	})

	context('Casos de teste para a rota api/cronogramas/', () => {
		it('Validar GET de cronogramas com sucesso', () => {
			var parametros = ''
			cy.validar_cronogramas(parametros).then((response) => {
				expect(response.status).to.eq(200)
				expect(response.body).to.have.property('count')
				expect(response.body).to.have.property('next')
				expect(response.body).to.have.property('previous')
				expect(response.body).to.have.property('results')
				expect(response.body.results).to.be.an('array')
				expect(response.body.results[0]).to.have.property('uuid').that.exist.and
					.is.not.empty
				expect(response.body.results[0]).to.have.property('numero').that.exist
					.and.is.not.empty
				expect(response.body.results[0]).to.have.property('status').that.exist
					.and.is.not.empty
				expect(response.body.results[0]).to.have.property('criado_em').that
					.exist.and.is.not.empty
				expect(response.body.results[0]).to.have.property('alterado_em').that
					.exist.and.is.not.empty
				expect(response.body.results[0]).to.have.property('empresa').that.exist
				expect(response.body.results[0].empresa).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].empresa).to.have.property(
					'nome_fantasia',
				).that.exist
				expect(response.body.results[0].empresa).to.have.property(
					'razao_social',
				).that.exist

				expect(response.body.results[0]).to.have.property(
					'qtd_total_programada',
				)
				expect(response.body.results[0]).to.have.property('unidade_medida').that
					.exist
				expect(response.body.results[0].unidade_medida).to.have.property('uuid')
					.that.exist
				expect(response.body.results[0].unidade_medida).to.have.property('nome')
					.that.exist
				expect(response.body.results[0].unidade_medida).to.have.property(
					'abreviacao',
				).that.exist
				expect(response.body.results[0].unidade_medida).to.have.property(
					'criado_em',
				).that.exist
				expect(response.body.results[0]).to.have.property('armazem').that.exist
				expect(response.body.results[0].armazem).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].armazem).to.have.property(
					'nome_fantasia',
				).that.exist
				expect(response.body.results[0].armazem).to.have.property(
					'razao_social',
				).that.exist
				expect(response.body.results[0]).to.have.property('etapas').that.exist
				expect(response.body.results[0].etapas).to.be.an('array')
				expect(response.body.results[0].etapas[0]).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'numero_empenho',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'qtd_total_empenho',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property('etapa')
					.that.exist
				expect(response.body.results[0].etapas[0]).to.have.property('parte')
					.that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'data_programada',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'quantidade',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'total_embalagens',
				).that.exist
				expect(response.body.results[0])
					.to.have.property('programacoes_de_recebimento')
					.to.be.an('array')
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('uuid').that.exist
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('data_programada').that.exist
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('tipo_carga').that.exist
				expect(response.body.results[0]).to.have.property('ficha_tecnica').that
					.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property('uuid')
					.that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'numero',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'produto',
				).that.exist
				expect(response.body.results[0].ficha_tecnica.produto).to.have.property(
					'uuid',
				).that.exist
				expect(response.body.results[0].ficha_tecnica.produto).to.have.property(
					'nome',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'uuid_empresa',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'pregao_chamada_publica',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property('marca')
					.that.exist
				expect(response.body.results[0].ficha_tecnica.marca).to.have.property(
					'uuid',
				).that.exist
				expect(response.body.results[0].ficha_tecnica.marca).to.have.property(
					'nome',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'volume_embalagem_primaria',
				)
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'unidade_medida_volume_primaria',
				)
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'peso_liquido_embalagem_primaria',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'unidade_medida_primaria',
				).that.exist
				expect(
					response.body.results[0].ficha_tecnica.unidade_medida_primaria,
				).to.have.property('uuid').that.exist
				expect(
					response.body.results[0].ficha_tecnica.unidade_medida_primaria,
				).to.have.property('nome').that.exist
				expect(
					response.body.results[0].ficha_tecnica.unidade_medida_primaria,
				).to.have.property('abreviacao').that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'peso_liquido_embalagem_secundaria',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'unidade_medida_secundaria',
				).that.exist
				expect(
					response.body.results[0].ficha_tecnica.unidade_medida_secundaria,
				).to.have.property('uuid').that.exist
				expect(
					response.body.results[0].ficha_tecnica.unidade_medida_secundaria,
				).to.have.property('nome').that.exist
				expect(
					response.body.results[0].ficha_tecnica.unidade_medida_secundaria,
				).to.have.property('abreviacao').that.exist

				expect(response.body.results[0]).to.have.property(
					'tipo_embalagem_secundaria',
				).that.exist
				expect(
					response.body.results[0].tipo_embalagem_secundaria,
				).to.have.property('uuid').that.exist
				expect(
					response.body.results[0].tipo_embalagem_secundaria,
				).to.have.property('nome').that.exist
				expect(
					response.body.results[0].tipo_embalagem_secundaria,
				).to.have.property('abreviacao').that.exist
				expect(response.body.results[0]).to.have.property(
					'custo_unitario_produto',
				).that.exist
				expect(response.body.results[0]).to.have.property('observacoes').that
					.exist
			})
		})

		it('Validar GET de cronogramas com parâmetro Status RASCUNHO com sucesso', () => {
			var parametros = '/?status=RASCUNHO'

			cy.validar_cronogramas(parametros).then((response) => {
				expect(response.status).to.eq(200)
				expect(response.body).to.have.property('count')
				expect(response.body).to.have.property('next')
				expect(response.body).to.have.property('previous')
				expect(response.body).to.have.property('results')
				expect(response.body.results).to.be.an('array')
				expect(response.body.results[0]).to.have.property('uuid').that.exist.and
					.is.not.empty
				expect(response.body.results[0]).to.have.property('numero').that.exist
					.and.is.not.empty
				expect(response.body.results[0])
					.to.have.property('status')
					.to.eq('Rascunho')
				expect(response.body.results[0]).to.have.property('criado_em').that
					.exist.and.is.not.empty
				expect(response.body.results[0]).to.have.property('alterado_em').that
					.exist.and.is.not.empty
				expect(response.body.results[0]).to.have.property('empresa').that.exist
				expect(response.body.results[0].empresa).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].empresa).to.have.property(
					'nome_fantasia',
				).that.exist
				expect(response.body.results[0].empresa).to.have.property(
					'razao_social',
				).that.exist

				expect(response.body.results[0]).to.have.property(
					'qtd_total_programada',
				)
				expect(response.body.results[0]).to.have.property('unidade_medida')
				expect(response.body.results[0]).to.have.property('armazem')
				expect(response.body.results[0]).to.have.property('etapas').that.exist
				expect(response.body.results[0].etapas).to.be.an('array')
				expect(response.body.results[0].etapas[0]).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'numero_empenho',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'qtd_total_empenho',
				)
				expect(response.body.results[0].etapas[0]).to.have.property('etapa')

				expect(response.body.results[0].etapas[0]).to.have.property('parte')

				expect(response.body.results[0].etapas[0]).to.have.property(
					'data_programada',
				)
				expect(response.body.results[0].etapas[0]).to.have.property(
					'quantidade',
				)
				expect(response.body.results[0].etapas[0]).to.have.property(
					'total_embalagens',
				)
				expect(response.body.results[0])
					.to.have.property('programacoes_de_recebimento')
					.to.be.an('array')
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('uuid').that.exist
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('data_programada').that.exist
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('tipo_carga').that.exist
				expect(response.body.results[0]).to.have.property('ficha_tecnica')
				expect(response.body.results[0]).to.have.property(
					'tipo_embalagem_secundaria',
				)
				expect(response.body.results[0]).to.have.property(
					'custo_unitario_produto',
				)
				expect(response.body.results[0]).to.have.property('observacoes')
			})
		})

		it('Validar GET de cronogramas com parâmetro Status ASSINADO_E_ENVIADO_AO_FORNECEDOR com sucesso', () => {
			var parametros = '?status=ASSINADO_E_ENVIADO_AO_FORNECEDOR'

			cy.validar_cronogramas(parametros).then((response) => {
				expect(response.status).to.eq(200)
				expect(response.body).to.have.property('count')
				expect(response.body).to.have.property('next')
				expect(response.body).to.have.property('previous')
				expect(response.body).to.have.property('results')
				expect(response.body.results).to.be.an('array')
				expect(response.body.results[0]).to.have.property('uuid').that.exist.and
					.is.not.empty
				expect(response.body.results[0]).to.have.property('numero').that.exist
					.and.is.not.empty
				expect(response.body.results[0])
					.to.have.property('status')
					.to.eq('Assinado e Enviado ao Fornecedor')
				expect(response.body.results[0]).to.have.property('criado_em').that
					.exist.and.is.not.empty
				expect(response.body.results[0]).to.have.property('alterado_em').that
					.exist.and.is.not.empty
				expect(response.body.results[0]).to.have.property('empresa').that.exist
				expect(response.body.results[0].empresa).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].empresa).to.have.property(
					'nome_fantasia',
				).that.exist
				expect(response.body.results[0].empresa).to.have.property(
					'razao_social',
				).that.exist

				expect(response.body.results[0]).to.have.property(
					'qtd_total_programada',
				)
				expect(response.body.results[0]).to.have.property('unidade_medida').that
					.exist
				expect(response.body.results[0].unidade_medida).to.have.property('uuid')
					.that.exist
				expect(response.body.results[0].unidade_medida).to.have.property('nome')
					.that.exist
				expect(response.body.results[0].unidade_medida).to.have.property(
					'abreviacao',
				).that.exist
				expect(response.body.results[0].unidade_medida).to.have.property(
					'criado_em',
				).that.exist
				expect(response.body.results[0]).to.have.property('armazem').that.exist
				expect(response.body.results[0].armazem).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].armazem).to.have.property(
					'nome_fantasia',
				).that.exist
				expect(response.body.results[0].armazem).to.have.property(
					'razao_social',
				).that.exist
				expect(response.body.results[0]).to.have.property('etapas').that.exist
				expect(response.body.results[0].etapas).to.be.an('array')
				expect(response.body.results[0].etapas[0]).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'numero_empenho',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'qtd_total_empenho',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property('etapa')
					.that.exist
				expect(response.body.results[0].etapas[0]).to.have.property('parte')
					.that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'data_programada',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'quantidade',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'total_embalagens',
				).that.exist
				expect(response.body.results[0])
					.to.have.property('programacoes_de_recebimento')
					.to.be.an('array')
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('uuid').that.exist
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('data_programada').that.exist
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('tipo_carga').that.exist
				expect(response.body.results[0]).to.have.property('ficha_tecnica').that
					.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property('uuid')
					.that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'numero',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'produto',
				).that.exist
				expect(response.body.results[0].ficha_tecnica.produto).to.have.property(
					'uuid',
				).that.exist
				expect(response.body.results[0].ficha_tecnica.produto).to.have.property(
					'nome',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'uuid_empresa',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'pregao_chamada_publica',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property('marca')
					.that.exist
				expect(response.body.results[0].ficha_tecnica.marca).to.have.property(
					'uuid',
				).that.exist
				expect(response.body.results[0].ficha_tecnica.marca).to.have.property(
					'nome',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'volume_embalagem_primaria',
				)
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'unidade_medida_volume_primaria',
				)
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'peso_liquido_embalagem_primaria',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'unidade_medida_primaria',
				).that.exist
				expect(
					response.body.results[0].ficha_tecnica.unidade_medida_primaria,
				).to.have.property('uuid').that.exist
				expect(
					response.body.results[0].ficha_tecnica.unidade_medida_primaria,
				).to.have.property('nome').that.exist
				expect(
					response.body.results[0].ficha_tecnica.unidade_medida_primaria,
				).to.have.property('abreviacao').that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'peso_liquido_embalagem_secundaria',
				).that.exist
				expect(response.body.results[0].ficha_tecnica).to.have.property(
					'unidade_medida_secundaria',
				).that.exist
				expect(
					response.body.results[0].ficha_tecnica.unidade_medida_secundaria,
				).to.have.property('uuid').that.exist
				expect(
					response.body.results[0].ficha_tecnica.unidade_medida_secundaria,
				).to.have.property('nome').that.exist
				expect(
					response.body.results[0].ficha_tecnica.unidade_medida_secundaria,
				).to.have.property('abreviacao').that.exist

				expect(response.body.results[0]).to.have.property(
					'tipo_embalagem_secundaria',
				).that.exist
				expect(
					response.body.results[0].tipo_embalagem_secundaria,
				).to.have.property('uuid').that.exist
				expect(
					response.body.results[0].tipo_embalagem_secundaria,
				).to.have.property('nome').that.exist
				expect(
					response.body.results[0].tipo_embalagem_secundaria,
				).to.have.property('abreviacao').that.exist
				expect(response.body.results[0]).to.have.property(
					'custo_unitario_produto',
				).that.exist
				expect(response.body.results[0]).to.have.property('observacoes').that
					.exist
			})
		})

		it('Validar GET de cronogramas com parâmetro Status ALTERACAO_CODAE com sucesso', () => {
			var parametros = '?status=ALTERACAO_CODAE'

			cy.validar_cronogramas(parametros).then((response) => {
				expect(response.status).to.eq(200)
				expect(response.body).to.have.property('count')
				expect(response.body).to.have.property('next')
				expect(response.body).to.have.property('previous')
				expect(response.body).to.have.property('results')
				expect(response.body.results).to.be.an('array')
				expect(response.body.results[0]).to.have.property('uuid').that.exist.and
					.is.not.empty
				expect(response.body.results[0]).to.have.property('numero').that.exist
					.and.is.not.empty
				expect(response.body.results[0])
					.to.have.property('status')
					.to.eq('Alteração CODAE')
				expect(response.body.results[0]).to.have.property('criado_em').that
					.exist.and.is.not.empty
				expect(response.body.results[0]).to.have.property('alterado_em').that
					.exist.and.is.not.empty
				expect(response.body.results[0]).to.have.property('empresa').that.exist
				expect(response.body.results[0].empresa).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].empresa).to.have.property(
					'nome_fantasia',
				).that.exist
				expect(response.body.results[0].empresa).to.have.property(
					'razao_social',
				).that.exist

				expect(response.body.results[0]).to.have.property(
					'qtd_total_programada',
				)
				expect(response.body.results[0]).to.have.property('unidade_medida')
				expect(response.body.results[0]).to.have.property('armazem').that.exist
				expect(response.body.results[0].armazem).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].armazem).to.have.property(
					'nome_fantasia',
				).that.exist
				expect(response.body.results[0].armazem).to.have.property(
					'razao_social',
				).that.exist
				expect(response.body.results[0]).to.have.property('etapas').that.exist
				expect(response.body.results[0].etapas).to.be.an('array')
				expect(response.body.results[0].etapas[0]).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'numero_empenho',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'qtd_total_empenho',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property('etapa')
					.that.exist
				expect(response.body.results[0].etapas[0]).to.have.property('parte')
					.that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'data_programada',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'quantidade',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'total_embalagens',
				).that.exist
				expect(response.body.results[0])
					.to.have.property('programacoes_de_recebimento')
					.to.be.an('array')
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('uuid').that.exist
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('data_programada').that.exist
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('tipo_carga').that.exist
				expect(response.body.results[0]).to.have.property('ficha_tecnica')
				expect(response.body.results[0]).to.have.property(
					'tipo_embalagem_secundaria',
				)
				expect(response.body.results[0]).to.have.property(
					'custo_unitario_produto',
				)
				expect(response.body.results[0]).to.have.property('observacoes')
			})
		})

		it('Validar GET de cronogramas com parâmetro Status ASSINADO_CODAE com sucesso', () => {
			var parametros = '?status=ASSINADO_CODAE'

			cy.validar_cronogramas(parametros).then((response) => {
				expect(response.status).to.eq(200)
				expect(response.body).to.have.property('count')
				expect(response.body).to.have.property('next')
				expect(response.body).to.have.property('previous')
				expect(response.body).to.have.property('results')
				expect(response.body.results).to.be.an('array')
				expect(response.body.results[0]).to.have.property('uuid').that.exist.and
					.is.not.empty
				expect(response.body.results[0]).to.have.property('numero').that.exist
					.and.is.not.empty
				expect(response.body.results[0])
					.to.have.property('status')
					.to.eq('Assinado CODAE')
				expect(response.body.results[0]).to.have.property('criado_em').that
					.exist.and.is.not.empty
				expect(response.body.results[0]).to.have.property('alterado_em').that
					.exist.and.is.not.empty
				expect(response.body.results[0]).to.have.property('empresa').that.exist
				expect(response.body.results[0].empresa).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].empresa).to.have.property(
					'nome_fantasia',
				).that.exist
				expect(response.body.results[0].empresa).to.have.property(
					'razao_social',
				).that.exist

				expect(response.body.results[0]).to.have.property(
					'qtd_total_programada',
				)
				expect(response.body.results[0]).to.have.property('unidade_medida').that
					.exist
				expect(response.body.results[0].unidade_medida).to.have.property('uuid')
					.that.exist
				expect(response.body.results[0].unidade_medida).to.have.property('nome')
					.that.exist
				expect(response.body.results[0].unidade_medida).to.have.property(
					'abreviacao',
				).that.exist
				expect(response.body.results[0].unidade_medida).to.have.property(
					'criado_em',
				).that.exist
				expect(response.body.results[0]).to.have.property('armazem').that.exist
				expect(response.body.results[0].armazem).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].armazem).to.have.property(
					'nome_fantasia',
				).that.exist
				expect(response.body.results[0].armazem).to.have.property(
					'razao_social',
				).that.exist
				expect(response.body.results[0]).to.have.property('etapas').that.exist
				expect(response.body.results[0].etapas).to.be.an('array')
				expect(response.body.results[0].etapas[0]).to.have.property('uuid').that
					.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'numero_empenho',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'qtd_total_empenho',
				)
				expect(response.body.results[0].etapas[0]).to.have.property('etapa')
					.that.exist
				expect(response.body.results[0].etapas[0]).to.have.property('parte')
					.that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'data_programada',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'quantidade',
				).that.exist
				expect(response.body.results[0].etapas[0]).to.have.property(
					'total_embalagens',
				).that.exist
				expect(response.body.results[0])
					.to.have.property('programacoes_de_recebimento')
					.to.be.an('array')
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('uuid').that.exist
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('data_programada').that.exist
				expect(
					response.body.results[0].programacoes_de_recebimento[0],
				).to.have.property('tipo_carga').that.exist
				expect(response.body.results[0]).to.have.property('ficha_tecnica')
				expect(response.body.results[0]).to.have.property(
					'tipo_embalagem_secundaria',
				)
				expect(response.body.results[0]).to.have.property(
					'custo_unitario_produto',
				)
				expect(response.body.results[0]).to.have.property('observacoes')
			})
		})
	})
})
